'''
 File: splaynode.shell
 Author: 
 Date: 9/17/2011
 Description: This module implements the SplayNode class. This class
   in turn is used by the SplayTree class.  The classes use 
   bottom up splaying rather than top down splaying.
'''

from stack import Stack

class SplayNode:
   
   def __init__(self, item, left = None, right = None):
      self.left = left
      self.item = item
      self.right = right

   def __str__(self): 
      st = '('
      if (self.left == None):
         st += '*'
      else:
         st += str(self.left)
      st += str(self.item)
      if (self.right == None):
         st += '*'
      else:
         st += str(self.right)
      st += ')'
      return st
   
   def setRight(self, newRight):
      self.right = newRight
      
   def setLeft(self, newLeft):
      self.left = newLeft
      
   def getRight(self):
      return self.right
   
   def getLeft(self):
      return self.left
   
   def getItem(self):
      return self.item
   
   def rotateLeft(self):
      '''  Perform a left rotation of the subtree rooted at the
       receiver.  Answer the root node of the new subtree.  
      '''
      child = self.right
      if (child == None):
         print('Error! No right child in rotateLeft.')
         return None  # redundant
      else:
         self.right = child.left
         child.left = self
         return child
      
   def rotateRight(self):
      '''  Perform a right rotation of the subtree rooted at the
       receiver. Answer the root node of the new subtree.
      '''
      child = self.left
      if (child == None):
         print('Error! No left child in rotateRight.')
         return None  # redundant
      else:
         self.left = child.right
         child.right = self
         return child
      
   def rotateLeftThenRight(self):
      '''  Perform a left rotate at parent node in the subtree, then
      perform a right rotation at self. Answer the root node of the
      new subtree (child).
      '''
      parent = self.left
      if (parent == None):
         print('Error! No left child in rotateLeftThenRight.')
         return None
      child = parent.right
      if (child == None):
         print('Error! No left child, right grandchild in rotateLeftThenRight.')
         return None
      else:
         parent.right = child.left
         self.left = child.right
         child.right = self
         child.left = parent
         return child
      
   def rotateRightThenLeft(self):
      '''  Perform a right rotate at parent none in the subtree, then
      perform a left rotation at self. Answer the root node of the
      new subtree (child).
      '''
      parent = self.right
      if (parent == None):
         print('Error! No right child in rotateRightThenLeft.')
         return None
      child = parent.left
      if (child == None):
         print('Error! No right child, left grandchild in rotateRightThenLeft.')
         return None
      else:
         parent.left = child.right
         self.right = child.left
         child.right = parent
         child.left = self
         return child
      
   def doubleRotateRight(self):
      '''  Perform a rotate right at self, then at parent. Answers
      with the root of the new tree (child).
      '''
      parent = self.left
      if (parent == None):
         print('Error! No left child in doubleRotateRight.')
         return None
      child = parent.left
      if (child == None):
         print('Error! No left child, left grandchild in doubleRotateRight.')
         return None
      else:
         parent.left = child.right
         self.left = parent.right
         child.right = parent
         parent.right = self
         return child
      
   def doubleRotateLeft(self):
      '''  Perform a rotate left at self, then at parent. Answers
      with the root of the new tree (child).
      '''
      parent = self.right
      if (parent == None):
         print('Error! No right child in doubleRotateLeft.')
         return None
      child = parent.right
      if (child == None):
         print('Error! No right child, right grandchild in doubleRotateLeft.')
         return None
      else:
         parent.right = child.left
         self.right = parent.left
         child.left = parent
         parent.left = self
         return child
      
   def find(self, anItem):
      ''' Attempt to find anItem in the binary search tree rooted at the
      receiver. If successful, splay the corresponding node to the root
      of the tree. If not, splay the last node on the search path to the
      root of the tree. Answer the root of the new tree.
      '''
      stack = Stack()
      current = self
      while current != None:
         stack.push(current)
         if current.item == anItem:
            return self.splayToRoot(stack)
         else:
            if current.item > anItem:
               current = current.left
            else:
               current = current.right
      return self.splayToRoot(stack)
   
   def findMax(self):
      ''' Find the largest element in the subtree rooted at the receiver.
      Splay that element to the root. Answer the new root.
      '''
      stack = Stack()
      current = self
      while current != None:
         stack.push(current)
         current = current.right
      return self.splayToRoot(stack)
      
   def findMin(self):
      ''' Find the smallest element in the subtree rooted at the receiver.
      Splay that element to the root. Answer the new root.
      '''
      stack = Stack()
      current = self
      while current != None:
         stack.push(current)
         current = current.left
      return self.splayToRoot(stack)
   
   def inorder(self):
      ''' Perform an inorder traversal of the subtree rooted at the
      receiver. Print each item in this subtree during the traversal.
      '''
      if self.left != None:
         self.left.inorder()
      print(self.item)
      if self.right != None:
         self.right.inorder()
   
   def insertInNode(self, anItem):
      ''' Try to insert a copy of anItem into the bottom up splay tree
      rooted at the receiver. If anItem is already in the tree, do not
      insert an extra copy. In any case, splay the new node, or the last
      node on the seatch path, to the root. The method will answer a tuple.
      The first element is True or False according to whether a new element
      was added or not. The second element is the new root node.
      '''
      stack = Stack()
      current = self
      while current != None:
         stack.push(current)
         if current.item == anItem:
            return (False, self.splayToRoot(stack))
         else:
            if current.item > anItem:
               current = current.left
            else:
               current = current.right
      newNode = SplayNode(anItem)
      parent = stack.pop()
      if parent.item > anItem:
         parent.left = newNode
      else:
         parent.right = newNode
      stack.push(parent)
      stack.push(newNode)
      return (True, self.splayToRoot(stack))

   def splayToRoot(self, stack):
      '''  Perform a bottom up splay beginning at the node at the
       top of the stack.  Answer the root of the new tree.
      '''
      child = stack.pop()
      while not stack.isEmpty():
         parent = stack.pop()
         if stack.top() == None:
            if child.item > parent.item:
               parent.rotateLeft()
            if child.item < parent.item:
               parent.rotateRight()
         else:
            grandparent = stack.pop()
            next = stack.top()
            if child.item < parent.item and child.item < grandparent.item:
               grandparent.doubleRotateRight()
               if next != None:
                  if child.item < next.item:
                     next.left = child
                  if child.item > next.item:
                     next.right = child
            elif child.item > parent.item and child.item > grandparent.item:
               grandparent.doubleRotateLeft()
               if next != None:
                  if child.item < next.item:
                     next.left = child
                  if child.item > next.item:
                     next.right = child
            elif child.item < parent.item and child.item > grandparent.item:
               grandparent.rotateRightThenLeft()
               if next != None:
                  if child.item < next.item:
                     next.left = child
                  if child.item > next.item:
                     next.right = child
            elif child.item > parent.item and child.item < grandparent.item:
               grandparent.rotateLeftThenRight()
               if next != None:
                  if child.item < next.item:
                     next.left = child
                  if child.item > next.item:
                     next.right = child
      return child
      
 
def main():
   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   x = c.rotateLeft()
   print( x )
   print( str(x) == '((((*10*)20(*25*))30(*35*))40(*45*))' )
   print( '' )

   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   x = c.rotateRight()
   print( x )
   print( str(x) == '((*10*)20((*25*)30((*35*)40(*45*))))' )
   print( '' )
   
   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   d = SplayNode(60, SplayNode(55), SplayNode(65))
   e = SplayNode(90, SplayNode(80), SplayNode(100))
   f = SplayNode(70, d, e)
   root = SplayNode(50, c, f)
   print( root )
   print( '' )

   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   d = SplayNode(60, SplayNode(55), SplayNode(65))
   e = SplayNode(90, SplayNode(80), SplayNode(100))
   f = SplayNode(70, d, e)
   root = SplayNode(50, c, f)
   x = root.rotateRightThenLeft()
   print( x )
   print( str(x) == '(((((*10*)20(*25*))30((*35*)40(*45*)))50(*55*))60((*65*)70((*80*)90(*100*))))' )
   print( '' )

   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   d = SplayNode(60, SplayNode(55), SplayNode(65))
   e = SplayNode(90, SplayNode(80), SplayNode(100))
   f = SplayNode(70, d, e)
   root = SplayNode(50, c, f)
   x = root.rotateLeftThenRight()
   print( x )
   print( str(x) == '((((*10*)20(*25*))30(*35*))40((*45*)50(((*55*)60(*65*))70((*80*)90(*100*)))))' )
   print( '' )

   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   d = SplayNode(60, SplayNode(55), SplayNode(65))
   e = SplayNode(90, SplayNode(80), SplayNode(100))
   f = SplayNode(70, d, e)
   root = SplayNode(50, c, f)
   x = root.doubleRotateLeft()
   print( x )
   print( str(x) == '((((((*10*)20(*25*))30((*35*)40(*45*)))50((*55*)60(*65*)))70(*80*))90(*100*))' )
   print( '' )
   
   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   d = SplayNode(60, SplayNode(55), SplayNode(65))
   e = SplayNode(90, SplayNode(80), SplayNode(100))
   f = SplayNode(70, d, e)
   root = SplayNode(50, c, f)
   x = root.doubleRotateRight()
   print( x )
   print( str(x) == '((*10*)20((*25*)30(((*35*)40(*45*))50(((*55*)60(*65*))70((*80*)90(*100*))))))' )
   print( '' )
   
   a = SplayNode(20, SplayNode(10), SplayNode(25))
   b = SplayNode(40, SplayNode(35), SplayNode(45))
   c = SplayNode(30, a, b)
   d = SplayNode(60, SplayNode(55), SplayNode(65))
   e = SplayNode(90, SplayNode(80), SplayNode(100))
   f = SplayNode(70, d, e)
   root = SplayNode(50, c, f)
   x = root.find(35)
   print( x )
   print( str(x) == \
   '((((*10*)20(*25*))30*)35((*40(*45*))50(((*55*)60(*65*))70((*80*)90(*100*)))))')
   
if __name__ == '__main__' : main()

''' Output splaynode.py:
>>> [evaluate splaynode.py]
((((*10*)20(*25*))30(*35*))40(*45*))
True

((*10*)20((*25*)30((*35*)40(*45*))))
True

((((*10*)20(*25*))30((*35*)40(*45*)))50(((*55*)60(*65*))70((*80*)90(*100*))))

(((((*10*)20(*25*))30((*35*)40(*45*)))50(*55*))60((*65*)70((*80*)90(*100*))))
True

((((*10*)20(*25*))30(*35*))40((*45*)50(((*55*)60(*65*))70((*80*)90(*100*)))))
True

((((((*10*)20(*25*))30((*35*)40(*45*)))50((*55*)60(*65*)))70(*80*))90(*100*))
True

((*10*)20((*25*)30(((*35*)40(*45*))50(((*55*)60(*65*))70((*80*)90(*100*))))))
True

((((*10*)20(*25*))30*)35((*40(*45*))50(((*55*)60(*65*))70((*80*)90(*100*)))))
True
>>> 
'''