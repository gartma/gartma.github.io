'''
  File: btreenode.shell -- change to .py
  Author: Max Gartner
  Date: 
  Description: 
'''

class BTreeNode:
    '''
      This module provides the BTreeNode class.  This class will
      be used by the BTree class.  Much of the functionality of
      BTrees is provided by this class.
    '''
    def __init__(self, degree = 1):
        ''' Create an empty node with the indicated degree.'''
        self.numberOfKeys = 0
        self.items = [None]*2*degree
        self.child = [None]*(2*degree+1)
        self.index = None

    def __str__(self):
        st = 'The contents of the node with index '+ \
             str(self.index) + ':\n'
        for i in range(0, self.numberOfKeys):
            st += '   Index   ' + str(i) + '  >  child: '
            st += str(self.child[i])
            st += '   item: '
            st += str(self.items[i]) + '\n'
        st += '                 child: '
        st += str(self.child[self.numberOfKeys]) + '\n'
        return st

    def addItemAndSplit(self, anItem, left, right):
        ''' 
          If the receiver is not full, generate an error.
          If full, split the receiver into two nodes, the
          smallest degree + 1 keys staying in the original node.
          The largest degree keys go into a new node which is
          returned. Note that the last child of the receiver
          and the first child of the new node will be the same.
        '''
        if not self.isFull():
            print( 'Error in addItemAndSplit' )
        else:
            degree = len(self.items) // 2
            temp = BTreeNode(degree + 1)
            temp.copyItemsAndChildren(self, 0, self.numberOfKeys, 0)
            temp.numberOfKeys = self.numberOfKeys
            temp.insertItem(anItem, left, right)
            self.items = [None]*2*degree
            self.child = [None]*(2*degree+1)
            self.copyItemsAndChildren(temp, 0, degree + 1, 0)
            self.numberOfKeys = degree + 1
            newNode = BTreeNode(degree)
            newNode.copyItemsAndChildren(temp, degree + 1, ((degree * 2) + 1), 0)
            newNode.numberOfKeys = degree
            return newNode
            

    def childIndexOf(self, anIndex):
        '''  Answer the index of the child, in the receiver,
          which contains anIndex.  Print an error message if
          there is no such child in the receiver.
        '''
        index = -1
        found = False
        k = 0
        while not found and k <= self.numberOfKeys:
            if self.child[k] == anIndex:
                found = True
                index = k
            else:
                k += 1
        if index < 0:
            print( 'Error in childIndexOf' )
        return index
        
    def copyItemsAndChildren(self, fromNode, start, finish, index):
        ''' The receiver gets the contents of the fromNode, from
          index start to finish, along with the next child.  The
          copying within the receiver begins at position index.
        '''
        inc = 0
        while (start + inc) != finish:
            self.items[index + inc] = fromNode.items[start + inc]
            self.child[index + inc] = fromNode.child[start + inc]
            inc += 1
        self.child[index + inc] = fromNode.child[start + inc]
    
    def copyWithRight(self, aNode, parentNode):  
        '''Answer a node which contains all the items and children
          of the receiver, followed by the parent item followed by
          all the items and children of aNode.  The receiver and
          aNode are left and right siblings with respect to an
          item within the parentNode.
        '''
        childIndex = 0
        while parentNode.child[childIndex] != self.index and parentNode.child[childIndex + 1] != aNode.index:
            childIndex += 1
        newNode = BTreeNode((len(self.items) // 2) + 1)
        newNode.copyItemsAndChildren(self, 0, self.numberOfKeys, 0)
        newNode.numberOfKeys = self.numberOfKeys
        newNode.insertItem(parentNode.items[childIndex], parentNode.child[childIndex], parentNode.child[childIndex + 1])
        newNode.copyItemsAndChildren(aNode, 0, aNode.numberOfKeys, newNode.numberOfKeys)
        newNode.numberOfKeys = newNode.numberOfKeys + aNode.numberOfKeys
        return newNode
     
    def insertItem(self, anItem, left = None, right = None):  
        ''' We assume that the receiver is not full. anItem is
          inserted into the receiver with child indices left and
          right.  This is done while retaining the <= ordering on
          the key of the item.  If the insertion is successful,
          answer True.  If not, answer False.
        '''
        search = self.searchNode(anItem)
        index = search['nodeIndex']
        if search['found']:
            return False
        else:
            if self.items[index] == None:
                self.items[index] = anItem
                self.child[index] = left
                self.child[index + 1] = right
                self.numberOfKeys += 1
                return True
            else:
                currentIndex = self.numberOfKeys
                while currentIndex != search['nodeIndex']:
                    self.items[currentIndex] = self.items[currentIndex - 1]
                    self.child[currentIndex + 1] = self.child[currentIndex]
                    currentIndex -= 1
                self.items[index] = anItem
                self.child[index] = left
                self.child[index + 1] = right
                self.numberOfKeys += 1
                return True

    def isFull(self):
        ''' Answer True if the receiver is full.  If not, return
          False.
        '''
        return (self.numberOfKeys == len(self.items))

    def removeChild(self, index):
        ''' If index is valid, remove and answer the child at
          location index.  If not, answer None.  In any event,
          do NOT update the key count.  We copy all the rest of
          the child entries towards the start one position.
          The method removeItem will decrement numberOfKeys.
        '''
        if self.child[index] != None:
            tempChild = self.child[index]
            self.child[index] = None
            temp = [None]*len(self.child)
            tempIndex = 0
            for item in self.child:
                if item != None:
                    temp[tempIndex] = item
                    tempIndex += 1
            self.child = temp
            return tempChild
        return None

    def removeItem(self, index):
        ''' If index is valid, remove and answer the item at
          location index.  Move the rest of the items to fill the
          gap.  Update the key count.  If the index is not valid,
          answer None.
        '''
        if self.items[index] != None:
            tempItem = self.items[index]
            self.items[index] = None
            temp = [None]*len(self.items)
            tempIndex = 0
            for item in self.items:
                if item != None:
                    temp[tempIndex] = item
                    tempIndex += 1
            self.items = temp
            self.numberOfKeys -= 1
            return tempItem
        return None

    def searchNode(self, anItem):
        '''Answer a dictionary satisfying: at 'found'
          either True or False depending upon whether the receiver
          has a matching item;  at 'nodeIndex', either the index of
          the matching item, or in the case of an unsuccessful
          search, the index of the smallest (first) item such that
          anItem < item, or self.numberOfKeys if all items
          are < anItem.  In other words, nodeIndex is the place in the node
          where the object is, or should go if there is room in the node.
        '''
        search = {'nodeIndex': 0, 'found': False}
        for item in self.items:
            if item == None:
                return search
            if anItem == item:
                search['found'] = True
                return search
            if anItem < item:
                return search
            else:
                search['nodeIndex'] += 1
        return search
    
    def getIndex(self):
        return self.index
    
    def getNumberOfKeys(self):
        return self.numberOfKeys

    def setIndex(self, anInteger):
        self.index = anInteger

    def setNumberOfKeys(self, anInt ):
        self.numberOfKeys = anInt

def main():

    print('My name is Max Gartner')
    
    # Poor style using instance variables directly!
    # Makes for easier testing, though!!
    n = BTreeNode(2)
    n.items[0:4] = [15,20,30,35]
    n.child[0:5] = [1,2,3,4,5]
    n.numberOfKeys = 4
    n.index = 11
    print( "Run 1" )
    print( n.searchNode(30))
    print( n.searchNode(10) )
    print( n.searchNode(31) )
    print( n.searchNode(40) )
    print( '' )
    
    
    b = BTreeNode(3)
    b.index = 133
    b.insertItem(500,19,21) # Child indices do NOT make sense!
    b.insertItem(150,31,43)
    b.insertItem(200,50,62)
    b.insertItem(700,70,18)
    b.insertItem(100,19,10)
    b.insertItem(300,11,12)    
    print( "Run 2" )
    print( b )

    
    n = BTreeNode(1)
    n.index = 12
    n.insertItem(50,3,34)
    n.insertItem(100, 34, 37)
    print( "Run 3" )
    print( n.searchNode(100) )
    print( n.searchNode(31) )
    print( n.searchNode(90) )
    print( n.searchNode(150) )
    print( '' )
    
    n = BTreeNode(2)
    n.items[0:4] = [15,20,30,35]
    n.child[0:5] = [1,2,3,4,5]
    n.numberOfKeys = 4
    n.index = 10
    print( "Run 4" )
    print( n )
    print( n.addItemAndSplit(32,4,13) )# Try adding 10, 36, ... 
    print( n )
    
    # This next part is useful for deletion
    n = BTreeNode(4)
    n.items[0:8] = [15,20,30,35,None,None,None,None]
    n.child[0:9] = [1,2,3,4,5,None,None,None,None]
    n.numberOfKeys = 4
    n.index = 6

    p = BTreeNode(4)
    p.items[0:8] = [40,50,60,70,None,None,None,None]
    p.child[0:9] = [6,7,8,9,10,None,None,None,None]
    p.setNumberOfKeys(4)
    p.setIndex(17)

    m = BTreeNode(4)
    m.items[0:8] = [41,42,43,44,None,None,None,None]
    m.child[0:9] = [11,12,13,14,15,None,None,None,None]
    m.setNumberOfKeys(4)
    m.setIndex(7)
    print( "Run 5" )
    print( m )

    new = n.copyWithRight(m,p) 
    print( "Run 6" )
    print( new )

if __name__ == '__main__': main()

''' The output:
Run 1
{'nodeIndex': 2, 'found': True}
{'nodeIndex': 0, 'found': False}
{'nodeIndex': 3, 'found': False}
{'nodeIndex': 4, 'found': False}

Run 2
The contents of the node with index 133:
   Index   0  >  child: 19   item: 100
   Index   1  >  child: 10   item: 150
   Index   2  >  child: 50   item: 200
   Index   3  >  child: 11   item: 300
   Index   4  >  child: 12   item: 500
   Index   5  >  child: 70   item: 700
                 child: 18

Run 3
{'nodeIndex': 1, 'found': True}
{'nodeIndex': 0, 'found': False}
{'nodeIndex': 1, 'found': False}
{'nodeIndex': 2, 'found': False}

Run 4
The contents of the node with index 10:
   Index   0  >  child: 1   item: 15
   Index   1  >  child: 2   item: 20
   Index   2  >  child: 3   item: 30
   Index   3  >  child: 4   item: 35
                 child: 5

The contents of the node with index None:
   Index   0  >  child: 4   item: 32
   Index   1  >  child: 13   item: 35
                 child: 5

The contents of the node with index 10:
   Index   0  >  child: 1   item: 15
   Index   1  >  child: 2   item: 20
   Index   2  >  child: 3   item: 30
                 child: 4

Run 5
The contents of the node with index 7:
   Index   0  >  child: 11   item: 41
   Index   1  >  child: 12   item: 42
   Index   2  >  child: 13   item: 43
   Index   3  >  child: 14   item: 44
                 child: 15

Run 6
The contents of the node with index None:
   Index   0  >  child: 1   item: 15
   Index   1  >  child: 2   item: 20
   Index   2  >  child: 3   item: 30
   Index   3  >  child: 4   item: 35
   Index   4  >  child: 5   item: 40
   Index   5  >  child: 11   item: 41
   Index   6  >  child: 12   item: 42
   Index   7  >  child: 13   item: 43
   Index   8  >  child: 14   item: 44
                 child: 15

'''

